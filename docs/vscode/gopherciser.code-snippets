{
	"scenarioaction" : {
		"scope": "go",
		"prefix": "action",
		"description": "Adds scenario action skeleton, to be used in an empty file. Action needs to be registered after completion.",
		"body": [
			"package ${2:scenario}",
			"",
			"import (",
			"\t\"github.com/qlik-oss/gopherciser/action\"",
			"\t\"github.com/qlik-oss/gopherciser/connection\"",
			"\t\"github.com/qlik-oss/gopherciser/session\"",
			")",
			"",
			"type (",
			"\t// ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} ${3:describe action here}",
			"\t${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings struct {",
			"\t\t${4:Parameter} string `json:\"parameter\" displayname:\"Parameter\" doc-key:\"path.to.description\"`",
			"\t}",
			")",
			"",
			"// Validate ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings action (Implements ActionSettings interface)",
			"func (settings ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings) Validate() ([]string, error) {",
			"\t// Add validation checks for the action here, Validate will be run before starting a simulation or",
			"\t// when the script validate command is issued",
			"\t// Return a list of warnings and/or validation error",
			"\treturn nil, nil",
			"}",
			"",
			"// Execute ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings action (Implements ActionSettings interface)",
			"func (settings ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings) Execute(sessionState *session.State, actionState *action.State, connectionSettings *connection.ConnectionSettings, label string, reset func()) {",
			"",
			"\t// *** Add actual user simulation here ***",
			"",
			"\tsessionState.Wait(actionState) // Await all async requests, e.g. those triggered on changed objects",
			"}",
			"",
			"// IsContainerAction Implements the ContainerAction interface. This marks the action as a",
			"// container action containing other actions. A container action will not log result as a normal action,",
			"// instead result will be logged as level=info, infotype: containeractionend",
			"// Returns if action is to be considered a container action.",
			"// ContainerAction can't be used in conjunction with StartActionOverrider interface",
			"// see e.g. \"iterated\" action",
			"// func (settings ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings) IsContainerAction() {}",
			"",
			"// AppStructureAction Implements AppStructureAction interface. It returns if this action should be included",
			"// when doing an \"get app structure\" from script, IsAppAction tells the scenario",
			"// to insert a \"getappstructure\" action after that action using data from",
			"// sessionState.CurrentApp. A list of Sub action to be evaluated can also be included",
			"// AppStructureAction returns if this action should be included when getting app structure",
			"// and any additional sub actions which should also be included",
			"//func (settings *${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings) AppStructureAction() (*scenario.AppStructureInfo, []scenario.Action) {",
			"//\treturn &scenario.AppStructureInfo{",
			"//\t\tIsAppAction: false,",
			"//\t\tInclude:     true,",
			"//\t}, nil",
			"//}",
			"",
			"// AffectsAppObjectsAction implements AffectsAppObjectsAction interface",
			"// Should be implemented by all actions that affect the availability of selectable objects for app structure consumption.",
			"// App structure of the current app is passed as an argument. The return is",
			"// * added *config.AppStructurePopulatedObjects - objects to be added to the selectable list by this action",
			"// * removed []string - ids of objects that are removed (including any children) by this action",
			"// * clearObjects bool - clears all objects except bookmarks and sheets",
			"//func (settings ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Settings) AffectsAppObjectsAction(structure appstructure.AppStructure) ([]*appstructure.AppStructurePopulatedObjects, []string, bool) {",
			"//\tselectables, err := structure.GetSelectables(settings.ID)",
			"//\tif err != nil {",
			"//\t\treturn nil, nil, false",
			"//\t}",
			"//\tnewObjs := appstructure.AppStructurePopulatedObjects{",
			"//\t\tParent:    settings.ID,",
			"//\t\tObjects:   make([]appstructure.AppStructureObject, 0),",
			"//\t\tBookmarks: nil,",
			"//\t}",
			"//\tnewObjs.Objects = append(newObjs.Objects, selectables...)",
			"//\treturn []*appstructure.AppStructurePopulatedObjects{&newObjs}, nil, true",
			"//}",			
		]
	}
}
