{
    "destinationspace.destinationspaceid": [
        "Specify destination space by ID."
    ],
    "destinationspace.destinationspacename": [
        "Specify destination space by name."
    ],
    "applybookmark.selectionsonly": [
        "Apply selections only."
    ],
    "appselection.appmode": [
        "App selection mode",
        "`current`: (default) Use the current app, selected by an app selection in a previous action",
        "`guid`: Use the app GUID specified by the `app` parameter.",
        "`name`: Use the app name specified by the `app` parameter.",
        "`random`: Select a random app from the artifact map, which is filled by e.g. `openhub`",
        "`randomnamefromlist`: Select a random app from a list of app names. The `list` parameter should contain a list of app names.",
        "`randomguidfromlist`: Select a random app from a list of app GUIDs. The `list` parameter should contain a list of app GUIDs.",
        "`randomnamefromfile`: Select a random app from a file with app names. The `filename` parameter should contain the path to a file in which each line represents an app name.",
        "`randomguidfromfile`: Select a random app from a file with app GUIDs. The `filename` parameter should contain the path to a file in which each line represents an app GUID.",
        "`round`: Select an app from the artifact map according to the round-robin principle.",
        "`roundnamefromlist`: Select an app from a list of app names according to the round-robin principle. The `list` parameter should contain a list of app names.",
        "`roundguidfromlist`: Select an app from a list of app GUIDs according to the round-robin principle. The `list` parameter should contain a list of app GUIDs.",
        "`roundnamefromfile`: Select an app from a file with app names according to the round-robin principle. The `filename` parameter should contain the path to a file in which each line represents an app name.",
        "`roundguidfromfile`: Select an app from a file with app GUIDs according to the round-robin principle. The `filename` parameter should contain the path to a file in which each line represents an app GUID."
    ],
    "appselection.app": [
        "App name or app GUID (supports the use of [session variables](#session_variables)). Used with `appmode` set to `guid` or `name`."
    ],
    "appselection.list": [
        "List of apps. Used with `appmode` set to `randomnamefromlist`, `randomguidfromlist`, `roundnamefromlist` or `roundguidfromlist`."
    ],
    "appselection.filename": [
        "Path to a file in which each line represents an app. Used with `appmode` set to `randomnamefromfile`, `randomguidfromfile`, `roundnamefromfile` or `roundguidfromfile`."
    ],
    "askhubadvisor.app": [
        "Optional name of app to pick in followup queries. If not set, a random app is picked."
    ],
    "askhubadvisor.querysource": [
        "The source from which queries will be randomly picked.",
        "`file`: Read queries from file defined by `file`.",
        "`querylist`: Read queries from list defined by `querylist`."
    ],
    "askhubadvisor.querylist": [
        "A list of queries. Plain strings are supported and will get a weight of `1`."
    ],
    "askhubadvisor.querylist.weight": [
        "A weight to set probablility of query being peformed."
    ],
    "askhubadvisor.querylist.query": [
        "A query sentence."
    ],
    "askhubadvisor.lang": [
        "Query language."
    ],
    "askhubadvisor.maxfollowup": [
        "The maximum depth of followup queries asked. A value of `0` means that a query from querysource is performed without followup queries."
    ],
    "askhubadvisor.file": [
        "Path to query file."
    ],
    "askhubadvisor.thinktime": [
        "Settings for the `thinktime` action, which is automatically inserted before each followup."
    ],
    "askhubadvisor.saveimages": [
        "Save images of charts to file."
    ],
    "askhubadvisor.saveimagefile": [
        "File name of saved images. Defaults to server side file name. Supports [Session Variables](https://github.com/qlik-trial/gopherciser-oss/blob/master/docs/settingup.md#session-variables)."
    ],
    "askhubadvisor.followuptypes": [
        "A list of followup types enabled for followup queries. If omitted, all types are enabled.",
        "`app`: Enable followup queries which change app.",
        "`measure`: Enable followups based on measures.",
        "`dimension`: Enable followups based on dimensions.",
        "`recommendation`: Enable followups based on recommendations.",
        "`sentence`: Enable followup queries based on bare sentences."
    ],
    "clearfield.name" : [
        "Name of field to clear."
    ],
    "clickactionbutton.id": [
        "ID of the action-button to click."
    ],
    "config.connectionSettings.mode": [
        "Authentication mode",
        "`jwt`: JSON Web Token",
        "`ws`: WebSocket"
    ],
    "config.connectionSettings.jwtsettings": [
        "(JWT only) Settings for the JWT connection."
    ],
    "config.connectionSettings.wssettings": [
        "(WebSocket only) Settings for the WebSocket connection."
    ],
    "config.connectionSettings.jwtsettings.keypath": [
        "Local path to the JWT key file."
    ],
    "config.connectionSettings.jwtsettings.jwtheader": [
        "JWT headers as an escaped JSON string. Custom headers to be added to the JWT header."
    ],
    "config.connectionSettings.jwtsettings.claims": [
        "JWT claims as an escaped JSON string."
    ],
    "config.connectionSettings.jwtsettings.alg": [
        "The signing method used for the JWT. Defaults to `RS512`, if omitted.",
        "For keyfiles in RSA format, supports `RS256`, `RS384` or `RS512`.",
        "For keyfiles in EC format, supports `ES256`, `ES384` or `ES512`."
    ],
    "config.connectionSettings.server": [
        "Qlik Sense host."
    ],
    "config.connectionSettings.virtualproxy": [
        "Prefix for the virtual proxy that handles the virtual users."
    ],
    "config.connectionSettings.rawurl": [
        "Define the connect URL manually instead letting the `openapp` action do it. **Note**: The protocol must be `wss://` or `ws://`."
    ],
    "config.connectionSettings.port": [
        "Set another port than default (`80` for http and `443` for https)."
    ],
    "config.connectionSettings.security": [
        "Use TLS (SSL) (`true` / `false`)."
    ],
    "config.connectionSettings.allowuntrusted": [
        "Allow untrusted (for example, self-signed) certificates (`true` / `false`). Defaults to `false`, if omitted."
    ],
    "config.connectionSettings.appext": [
        "Replace `app` in the connect URL for the `openapp` action. Defaults to `app`, if omitted."
    ],
    "config.connectionSettings.headers": [
        "Headers to use in requests."
    ],
    "config.hooks.preexecute": [
        "Pre execution hook. Can be used to send a request to an endpoint before a test starts."
    ],
    "config.hooks.postexecute":[
        "Post execution hook. Can be used to send a request to an endpoint after a test is done."
    ],
    "config.loginSettings": [
        "This section of the JSON file contains information on the login settings."
    ],
    "config.loginSettings.type": [
        "Type of login request",
        "`prefix`: Add a prefix (specified by the `prefix` setting below) to the username, so that it will be `prefix_{session}`.",
        "`userlist`: List of users as specified by the `userList` setting below.",
        "`fromfile`: List of users from a file with 1 user per row and the format `username;directory;password`",
        "`none`: Do not add a prefix to the username, so that it will be `{session}`."
    ],
    "config.loginSettings.settings": [
        "",
        "`userList`: List of users for the `userlist` login request type. Directory and password can be specified per user or outside the list of usernames, which means that they are inherited by all users.",        
        "`filename`: Path to file with users."
    ],
    "config.loginSettings.settings.prefix": [
        "Prefix to add to the username, so that it will be `prefix_{session}`."
    ],
    "config.loginSettings.settings.directory": [
        "Directory to set for the users."
    ],
    "config.scenario": [
        "This section of the JSON file contains the actions that are performed in the load scenario."
    ],
    "config.scenario.action": [
        "Name of the action to execute."
    ],
    "config.scenario.label": [
        "(optional) Custom string set by the user. This can be used to distinguish the action from other actions of the same type when analyzing the test results."
    ],
    "config.scenario.disabled": [
        "(optional) Disable action (`true` / `false`). If set to `true`, the action is not executed."
    ],
    "config.scenario.settings": [
        "Most, but not all, actions have a settings section with action-specific settings."
    ],
    "config.scheduler": [
        "This section of the JSON file contains scheduler settings for the users in the load scenario."
    ],
    "config.scheduler.type": [
        "Type of scheduler",
        "`simple`: Standard scheduler"
    ],
    "config.scheduler.settings": [
        ""
    ],
    "config.scheduler.settings.executiontime": [
        "Test execution time (seconds). The sessions are disconnected when the specified time has elapsed. Allowed values are positive integers. `-1` means an infinite execution time."
    ],
    "config.scheduler.settings.iterations": [
        "Number of iterations for each 'concurrent' user to repeat. Allowed values are positive integers. `-1` means an infinite number of iterations."
    ],
    "config.scheduler.settings.rampupdelay": [
        "Time delay (seconds) scheduled in between each concurrent user during the startup period."
    ],
    "config.scheduler.settings.concurrentusers": [
        "Number of concurrent users to simulate. Allowed values are positive integers."
    ],
    "config.scheduler.reconnectsettings" : [
        "Settings for enabling re-connection attempts in case of unexpected disconnects."
    ],
    "config.scheduler.settings.reuseusers": [
        "",
        "`true`: Every iteration for each concurrent user uses the same user and session.",
        "`false`: Every iteration for each concurrent user uses a new user and session. The total number of users is the product of `concurrentusers` and `iterations`."
    ],
    "config.scheduler.settings.onlyinstanceseed": [
        "Disable session part of randomization seed. Defaults to `false`, if omitted.",
        "`true`: All users and sessions have the same randomization sequence, which only changes if the `instance` flag is changed.",
        "`false`: Normal randomization sequence, dependent on both the `instance` parameter and the current user session."
    ],
    "config.scheduler.iterationtimebuffer": [
        ""
    ],
    "config.scheduler.iterationtimebuffer.mode": [
        "Time buffer mode. Defaults to `nowait`, if omitted.",
        "`nowait`: No time buffer in between the iterations.",
        "`constant`: Add a constant time buffer after each iteration. Defined by `duration`.",
        "`onerror`: Add a time buffer in case of an error. Defined by `duration`.",
        "`minduration`: Add a time buffer if the iteration duration is less than `duration`."
    ],
    "config.scheduler.iterationtimebuffer.duration": [
        "Duration of the time buffer (for example, `500ms`, `30s` or `1m10s`). Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`."
    ],
    "config.scheduler.instance": [
        "Instance number for this instance. Use different instance numbers when running the same script in multiple instances to make sure the randomization is different in each instance. Defaults to 1."
    ],
    "config.settings": [
        "This section of the JSON file contains timeout and logging settings for the load scenario"
    ],
    "config.settings.timeout": [
        "Timeout setting (seconds) for WebSocket requests."
    ],
    "config.settings.logs.traffic": [
        "Log traffic information (`true` / `false`). Defaults to `false`, if omitted. **Note:** This should only be used for debugging purposes as traffic logging is resource-demanding."
    ],
    "config.settings.logs.regression": [
        "Log regression data (`true` / `false`). Defaults to `false`, if omitted. **Note:** Do not log regression data when testing performance. **Note** With regression logging enabled, the the scheduler is implicitly set to execute the scenario as one user for one iteration."
    ],
    "config.settings.logs": [
        "Log settings"
    ],
    "config.settings.logs.debug": [
        "Log debug information (`true` / `false`). Defaults to `false`, if omitted."
    ],
    "config.settings.logs.metrics": [
        "Log traffic metrics (`true` / `false`). Defaults to `false`, if omitted. **Note:** This should only be used for debugging purposes as traffic logging is resource-demanding."
    ],
    "config.settings.logs.filename": [
        "Name of the log file (supports the use of [variables](#session_variables))."
    ],
    "config.settings.logs.format": [
        "Log format. Defaults to `tsvfile`, if omitted.",
        "`tsvfile`: Log to file in TSV format and output status to console.",
        "`tsvconsole`: Log to console in TSV format without any status output.",
        "`jsonfile`: Log to file in JSON format and output status to console.",
        "`jsonconsole`: Log to console in JSON format without any status output.",
        "`console`: Log to console in color format without any status output.",
        "`combined`: Log to file in TSV format and to console in JSON format.",
        "`no`: Default logs and status output turned off.",
        "`onlystatus`: Default logs turned off, but status output turned on."
    ],
    "config.settings.logs.summary": [
        "Type of summary to display after the test run. Defaults to simple for minimal performance impact.",
        "`0` or `undefined`: Simple, single-row summary",
        "`1` or `none`: No summary",
        "`2` or `simple`: Simple, single-row summary",
        "`3` or `extended`: Extended summary that includes statistics on each unique combination of action, label and app GUID",
        "`4` or `full`: Same as extended, but with statistics on each unique combination of method and endpoint added"
    ],
    "config.settings.outputs": [
        "Used by some actions to save results to a file."
    ],
    "config.settings.outputs.dir": [
        "Directory in which to save artifacts generated by the script (except log file)."
    ],
    "containertab.mode": [
        "Mode for container tab switching, one of: `objectid`, `random` or `index`.",
        "`objectid`: Switch to tab with object defined by `objectid`.",
        "`random`: Switch to a random visible tab within the container.",
        "`index`: Switch to tab with zero based index defined but `index`."
    ],
    "containertab.containerid": [
        "ID of the container object."
    ],
    "containertab.objectid": [
        "ID of the object to set as active, used with mode `objectid`."
    ],
    "containertab.index": [
        "Zero based index of tab to switch to, used with mode `index`."
    ],
    "bookmark.title": [
        "Name of the bookmark (supports the use of [variables](#session_variables))."
    ],
    "bookmark.id": [
        "ID of the bookmark."
    ],
    "changesheet.id": [
        "GUID of the sheet to change to."
    ],
    "createbookmark.description": [
        "(optional) Description of the bookmark to create."
    ],
    "createbookmark.nosheet": [
        "Do not include the sheet location in the bookmark."
    ],
    "createbookmark.savelayout": [
        "Include the layout in the bookmark."
    ],
    "createsheet.title": [
        "Name of the sheet to create."
    ],
    "createsheet.id": [
        "(optional) ID to be used to identify the sheet in any subsequent `changesheet`, `duplicatesheet`, `publishsheet` or `unpublishsheet` action."
    ],
    "createsheet.description": [
        "(optional) Description of the sheet to create."
    ],
    "deletebookmark.mode": [
        "",
        "`single`: Delete one bookmark that matches the specified `title` or `id` in the current app.",
        "`matching`: Delete all bookmarks with the specified `title` in the current app.",
        "`all`: Delete all bookmarks in the current app."
    ],
    "deleteodag.linkname": [
        "Name of the ODAG link from which to delete generated apps. The name is displayed in the ODAG navigation bar at the bottom of the *selection app*."
    ],
    "deletesheet.mode": [
        "",
        "`single`: Delete one sheet that matches the specified `title` or `id` in the current app.",
        "`matching`: Delete all sheets with the specified `title` in the current app.",
        "`allunpublished`: Delete all unpublished sheets in the current app."
    ],
    "deletesheet.title": [
        "(optional) Name of the sheet to delete."
    ],
    "deletesheet.id": [
        "(optional) GUID of the sheet to delete."
    ],
    "duplicatesheet.id": [
        "ID of the sheet to clone."
    ],
    "duplicatesheet.save": [
        "Execute `saveobjects` after the cloning operation to save all modified objects (`true` / `false`). Defaults to `false`, if omitted."
    ],
    "duplicatesheet.changesheet": [
        "Clear the objects currently subscribed to and then subribe to all objects on the cloned sheet (which essentially corresponds to using the `changesheet` action to go to the cloned sheet) (`true` / `false`). Defaults to `false`, if omitted."
    ],
    "duplicatesheet.cloneid": [
        "(optional) ID to be used to identify the sheet in any subsequent `changesheet`, `duplicatesheet`, `publishsheet` or `unpublishsheet` action."
    ],
    "generateodag.linkname": [
        "Name of the ODAG link from which to generate an app. The name is displayed in the ODAG navigation bar at the bottom of the *selection app*."
    ],
    "hook.content" : [
        "(optional) Content of request."
    ],
    "hook.contenttype": [
        "Request content-type header. Defaults to application/json."
    ],
    "hook.extractors": [
        "Extractors, can be used to extract a value from the response to be used on subsequent hook, or to validate that a that part of a response has a specific value."
    ],
    "hook.extractor.faillevel": [
        "Defines how to report data extraction or validation failure.",
        "`none`: Do nothing.",
        "`info`: Log an info log row.",
        "`warning`: Log a warning log row.",
        "`error`: Log a error row and abort script."
    ],
    "hook.extractor.name": [
        "Name of extractor, this name is what is later used to when accessing the extracted data in a template such as {{ .Vars.MyExtractorName }}."
    ],
    "hook.extractor.path": [
        "Path to data to extract, e.g. /id to extract the data my-id from from a parameter *id* in JSON root."
    ],
    "hook.extractor.validator": [
        "Validate that part of the response has a specific value"
    ],
    "hook.extractor.validator.type": [
        "Value should be of this type.",
        "`none`: Default type, no validation of value will be done.",
        "`bool`: Value should be a boolean.",
        "`number`: Value should be a number.",
        "`string`: Value should be a string."
    ],
    "hook.extractor.validator.value": [
        "Validate the value is exactly equal to this."
    ],
    "hook.headers":[
        "Custom headers to add to the request."
    ],
    "hook.headers.name": [
        "Name of header."
    ],
    "hook.headers.value": [
        "Value of header."
    ],
    "hook.method": [
        "Method of request, defaults to none."
    ],
    "hook.respcodes": [
        "Accepted response codes, defaults to 200."
    ],
    "hook.url": [
        "Url to send a request towards."
    ],
    "iterated.iterations": [
        "Number of loops."
    ],
    "iterated.actions": [
        "Actions to iterate"
    ],
    "listboxselect.id": [
        "ID of the listbox in which to select values."
    ],
    "listboxselect.type": [
		"Selection type.",
        "`all`: Select all values.",
        "`alternative`: Select alternative values.",
        "`excluded`: Select excluded values.",
        "`possible`: Select possible values."
    ],
    "listboxselect.wrap": [
        "Wrap selection with Begin / End selection requests (`true` / `false`)."
    ],
    "listboxselect.accept": [
        "Accept or abort selection after selection (only used with `wrap`) (`true` / `false`)."
    ],
    "openapp.unique" : [
        "Create unqiue engine session not re-using session from previous connection with same user. Defaults to false."
    ],
    "productversion.log": [
        "Save the product version to the log (`true` / `false`). Defaults to `false`, if omitted."
    ],
    "publishsheet.mode": [
        "",
        "`allsheets`: Publish all sheets in the app.",
        "`sheetids`: Only publish the sheets specified by the `sheetIds` array."
    ],
    "publishsheet.sheetIds": [
        "(optional) Array of sheet IDs for the `sheetids` mode."
    ],
    "randomaction.iterations": [
        "Number of random actions to perform."
    ],
    "randomaction.thinktimesettings": [
        "Settings for the `thinktime` action, which is automatically inserted after every randomized action."
    ],
    "randomaction.actions": [
        "List of actions from which to randomly pick an action to execute. Each item has a number of possible parameters."
    ],
    "randomaction.actions.type": [
        "Type of action",
        "`thinktime`: See the `thinktime` action.",
        "`sheetobjectselection`: Make random selections within objects visible on the current sheet. See the `select` action.",
        "`changesheet`: See the `changesheet` action.",
        "`clearall`: See the `clearall` action."
    ],
    "randomaction.actions.weight": [
        "The probabilistic weight of the action, specified as an integer. This number is proportional to the likelihood of the specified action, and is used as a weight in a uniform random selection."
    ],
    "randomaction.actions.overrides": [
        "(optional) Static overrides to the action. The overrides can include any or all of the settings from the original action, as determined by the `type` field. If nothing is specified, the default values are used."
    ],
    "reconnectsettings.reconnect" : [
        "Enable re-connection attempts if the WebSocket is disconnected. Defaults to `false`."
    ],
    "reconnectsettings.backoff" : [
        "Re-connection backoff scheme. Defaults to `[0.0, 2.0, 2.0, 2.0, 2.0, 2.0]`, if left empty. An example backoff scheme could be `[0.0, 1.0, 10.0, 20.0]`:",
        "`0.0`: If the WebSocket is disconnected, wait 0.0s before attempting to re-connect",
        "`1.0`: If the previous attempt to re-connect failed, wait 1.0s before attempting again",
        "`10.0`: If the previous attempt to re-connect failed, wait 10.0s before attempting again",
        "`20.0`: If the previous attempt to re-connect failed, wait 20.0s before attempting again"
    ],
    "reload.mode": [
        "Error handling during the reload operation",
        "`default`: Use the default error handling.",
        "`abend`: Stop reloading the script, if an error occurs.",
        "`ignore`: Continue reloading the script even if an error is detected in the script."
    ],
    "reload.partial": [
        "Enable partial reload (`true` / `false`). This allows you to add data to an app without reloading all data. Defaults to `false`, if omitted."
    ],
    "reload.log": [
        "Save the reload log as a field in the output (`true` / `false`). Defaults to `false`, if omitted. **Note:** This should only be used when needed as the reload log can become very large."
    ],
    "select.id": [
        "ID of the object in which to select values."
    ],
    "select.type": [
        "Selection type",
        "`randomfromall`: Randomly select within all values of the symbol table.",
        "`randomfromenabled`: Randomly select within the white and light grey values on the first data page.",
        "`randomfromexcluded`: Randomly select within the dark grey values on the first data page.",
        "`randomdeselect`: Randomly deselect values on the first data page.",
        "`values`: Select specific element values, defined by `values` array."
    ],
    "select.accept": [
        "Accept or abort selection after selection (only used with `wrap`) (`true` / `false`)."
    ],
    "select.wrap": [
        "Wrap selection with Begin / End selection requests (`true` / `false`)."
    ],
    "select.min": [
        "Minimum number of selections to make."
    ],
    "select.max": [
        "Maximum number of selections to make."
    ],
    "select.dim": [
        "Dimension / column in which to select."
    ],
    "select.values": [
        "Array of element values to select when using selection type `values`. These are the element values for a selection, not the values seen by the user."
    ],
    "setscript.script": [
        "Load script for the app (written as a string)."
    ],
    "setscriptvar.name" : [
        "Name of variable to set. Will overwrite any existing variable with same name."
    ],
    "setscriptvar.sep" : [
        "Separator to use when separating string into array. Defaults to `,`."
    ],
    "setscriptvar.type" : [
        "Type of the variable.",
        "`string`: Variable of type string e.g. `my var value`.",
        "`int`: Variable of type integer e.g. `6`.",
        "`array`: Variable of type array e.g. `1,2,3`."
    ],
    "setscriptvar.value": [
        "Value to set to variable (supports the use of [session variables](#session_variables))."
    ],
    "subscribeobjects.clear" : [
        "Remove any previously subscribed objects from the subscription list."
    ],
    "subscribeobjects.ids" : [
        "List of object IDs to subscribe to."
    ],
    "unsubscribeobjects.clear" : [
        "Remove any previously subscribed objects from the subscription list."
    ],
    "unsubscribeobjects.ids" : [
        "List of object IDs to unsubscribe from."
    ],
    "thinktime.type": [
        "Type of think time",
        "`static`: Static think time, defined by `delay`.",
        "`uniform`: Random think time with uniform distribution, defined by `mean` and `dev`."
    ],
    "thinktime.delay": [
        "Delay (seconds), used with type `static`."
    ],
    "thinktime.mean": [
        "Mean (seconds), used with type `uniform`."
    ],
    "thinktime.dev": [
        "Deviation (seconds) from `mean` value, used with type `uniform`."
    ],
    "tus.chunksize": [
        "Upload chunk size (in bytes). Defaults to 300 MiB, if omitted or zero."
    ],
    "tus.retries": [
        "Number of consecutive retries, if a chunk fails to upload. Defaults to 0 (no retries), if omitted. The first retry is issued instantly, the second with a one second back-off period, the third with a two second back-off period, and so on."
    ],
    "tus.timeout": [
        "Duration after which the upload times out (for example, `1h`, `30s` or `1m10s`). Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`."
    ],
    "unpublishsheet.mode": [
        "",
        "`allsheets`: Unpublish all sheets in the app.",
        "`sheetids`: Only unpublish the sheets specified by the `sheetIds` array."
    ],
    "unpublishsheet.sheetIds": [
        "(optional) Array of sheet IDs for the `sheetids` mode."
    ],
    "uploaddata.filename": [
        "Name of the local file to send as payload."
    ],
    "uploaddata.replace": [
        "Set to true to replace existing file. If set to false, a warning of existing file will be reported and file will not be replaced."
    ],
    "uploaddata.spaceid": [
        "(optional) Space ID of space where to upload the data. Leave blank to upload to personal space."
    ],
    "uploaddata.title": [
        "(optional) Set custom title of file on upload. Defaults to file name (excluding extension). (supports the use of [session variables](#session_variables))"
    ],
    "setsensevariable.name": [
        "Name of the Qlik Sense variable to set."
    ],
    "setsensevariable.value": [
        "Value to set the Qlik Sense variable to. (supports the use of [session variables](#session_variables))"
    ]    
}
